# to start repo tracking
git init

# to check status of the project
git status

# imagine you modify one file, many files in which you have source code
# if you run git status again, it will tell you that there are files
# that have changed 
git status  # output that some files have been modified
            # or even that there are  files not being tracked

# tell git to track the files you want to track, for example this one
git add filename

# every time you run the command git add filename, you include filename into the
# staging area. Running git status again will tell you that there are changes
# associated with filename to be commited

# the files listed in the changes to be commited are in the staging area 
# and they are not in our repo yet. We could add or remove files from the stage area
# before store them in the repo.
# To store the staged changes we run the git commit command with the message flag
# to include a description what we have changed
git commit -m "Message about you have changed"

# during your stage file tracking, you can use wildcard operator * to
# track all the files, imagine all *.py source code files for example
git add '*.txt'

# after making some commits, you can browse in the history of these commits
# by running the command
git log

# the output is  a history of commits with messages, author, email, date/time and 
# commit codes. This is like a journal that remembers all the changes we have 
# commited up to now

# if you make changes to file(s), to see te changes to file(s) not yet 
# staged, run the command
git diff
# if you run this command right after git add file, the output will be empty

